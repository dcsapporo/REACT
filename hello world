//////////////HTML
<div id='root'></div>
///////////////////////////////
////////////REACT
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<h1>Hello, World!</h1>);
//////////////////////////////////////////
/////////////2nd REACT
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render();


function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  root.render(element);
}

setInterval(tick, 1000);
//////////////////////////////////////////
///////////3rd REACT
const root = ReactDOM.createRoot(document.getElementById('root'));

function Clock(props) {
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
}

function tick() {
  root.render(<Clock date={new Date()} />);
}

setInterval(tick, 1000);
//////////////////////////////////////////
///////////4th REACT
const root = ReactDOM.createRoot(document.getElementById('root'));
//Changing a function component into a class to create local state control
class Clock extends React.Component {
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

function tick() {
  root.render(<Clock date={new Date()} />);
}

setInterval(tick, 1000);
//////////////////////////////////////////
///////////5th REACT
const root = ReactDOM.createRoot(document.getElementById('root'));
//Changing a function component into a class to create local state control
//Adding local state to a class component
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

function tick() {
  root.render(<Clock />);
}

setInterval(tick, 1000);
//////////////////////////////////////////
///////////6th REACT
//Changing a function component into a class to create local state control
//Adding local state to a class component
//Adding Lifecycle Methods to a class component "componentDidMount" and "componentWillUnmount"
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }
  //timerID is arbitrary, you could call anything
  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }
  
  componentWillUnmount() {
    clearInterval(this.timerID);
  }
  
  tick() {
    this.setState({
      date: new Date()
    });
  }
  
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Clock />);
//////////////////////////////////////////
///////////7th REACT
//Data flows down, a component may choose to pass its state down as props to its child components
//The following function is the parent of the displayed <FormattedDate /> tag
function FormattedDate(props) {
  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;
}
//Changing a function component into a class to create local state control
//Adding local state to a class component
//Adding Lifecycle Methods to a class component "componentDidMount" and "componentWillUnmount"
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }
  //timerID is arbitrary, you could call anything
  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }
  
  componentWillUnmount() {
    clearInterval(this.timerID);
  }
  
  tick() {
    this.setState({
      date: new Date()
    });
  }
  
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <FormattedDate date={this.state.date} />
      </div>
    );
  }
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Clock />);
//////////////////////////////////////////
///////////8th REACT
//Data flows down, a component may choose to pass its state down as props to its child components
//The following function is the parent of the displayed <FormattedDate /> tag
function FormattedDate(props) {
  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;
}
//Changing a function component into a class to create local state control
//Adding local state to a class component
//Adding Lifecycle Methods to a class component "componentDidMount" and "componentWillUnmount"
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }
  //timerID is arbitrary, you could call anything
  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }
  
  componentWillUnmount() {
    clearInterval(this.timerID);
  }
  
  tick() {
    this.setState({
      date: new Date()
    });
  }
  
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <FormattedDate date={this.state.date} />
      </div>
    );
  }
}

function App() {
  return (
    <div>
      <Clock />
      <Clock />
      <Clock />
    </div>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
